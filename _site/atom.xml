<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Prakash Natarajan</title>
 <link href="http://www.prakashn.com/atom.xml" rel="self"/>
 <link href="http://www.prakashn.com/"/>
 <updated>2015-08-21T00:15:25-04:00</updated>
 <id>http://www.prakashn.com</id>
 <author>
   <name>Prakash Natarajan</name>
   <email></email>
 </author>

 
 <entry>
   <title>Async fetching of script in HTML5</title>
   <link href="http://www.prakashn.com/2015/08/20/async-fetching-of-scripts-in-html/"/>
   <updated>2015-08-20T00:00:00-04:00</updated>
   <id>http://www.prakashn.com/2015/08/20/async-fetching-of-scripts-in-html</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Who wants a slow page loading? NO - ONE&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;But my external are scripts are so big and it does not depend of the parsing of the page elements, then why should we load the script at the same time as html.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Prereq&lt;/em&gt; : &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#HTML_Parser&quot;&gt;click this link to get more insights abouts the how html is loaded into the page &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One hack to overcome this page load time is to load the scripts in the seperate thread. This can be acheived by using &lt;strong&gt;async&lt;/strong&gt; keyword in the script tag. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This async key word in the script tag creates a seperate thread from rendering engine and loads the script asynchronously.&lt;/p&gt;

&lt;p&gt;Another hack to load the scriopt after the page is loaded (that is after all  the elements are parsed) is to use the &lt;strong&gt;defer&lt;/strong&gt; attribute. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following tables describes the action for async and defer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;a href=&quot;http://www.w3schools.com/tags/att_script_defer.asp&quot;&gt;w3schools.com&lt;/a&gt; &lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;async&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;defer&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;The script is executed asynchronously with the rest of the page (the script will be executed while the page continues the parsing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;No&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;The script is executed when the page has finished parsing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;No&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;The script is fetched and executed immediately, before the browser continues parsing the page&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Thanks for reading. Now it is time to load faster.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Programming - A Dumb Child Approach</title>
   <link href="http://www.prakashn.com/2015/03/20/what-is-programming/"/>
   <updated>2015-03-20T00:00:00-04:00</updated>
   <id>http://www.prakashn.com/2015/03/20/what-is-programming</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Credits:&lt;/strong&gt; &lt;a href=&quot;http://www.quora.com/How-can-programmers-conceive-and-write-abstract-things-like-computer-programs-and-codes&quot;&gt;Quora&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming&lt;/strong&gt; is the art of instructing a really-really-really dumb kid. You have to be specific. You have to be detailed. Most of all, you need to be concise.&lt;/p&gt;

&lt;p&gt;Take &amp;quot;do the laundry&amp;quot; for instance. This is probably quite intuitive for most people. The instruction for a smart kid might be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bring your clothes to the washer and do your laundry.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a really dumb kid (computer), you need to be much more specific and make sure you cover all your bases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Go to your room.&lt;/li&gt;
&lt;li&gt; Obtain a basket.&lt;/li&gt;
&lt;li&gt; For all dirty clothes, place in basket.&lt;/li&gt;
&lt;li&gt; Pick up the basket.&lt;/li&gt;
&lt;li&gt; Go to the laundry room.&lt;/li&gt;
&lt;li&gt; Place dirty clothes in washer.&lt;/li&gt;
&lt;li&gt; Add detergent.&lt;/li&gt;
&lt;li&gt; Set washer to 45mins, warm.&lt;/li&gt;
&lt;li&gt; Push the start button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is actually still quite high-level (not detailed enough). You need to include checks in the middle.&lt;/p&gt;

&lt;p&gt;During each step, check:&lt;br&gt;
* is the house on fire?&lt;br&gt;
* is your name being called?&lt;br&gt;
* is there a poisonous spider?     &lt;/p&gt;

&lt;p&gt;Each one of these need further instructions!!!&lt;/p&gt;

&lt;p&gt;That&amp;#39;s basically what programming is, a set of very very detailed instructions pieced together in an over all set of instructions we call software.&lt;/p&gt;

&lt;p&gt;In this context, it&amp;#39;s actually much more amazing what we can do as humans!&lt;/p&gt;

&lt;p&gt;Take the first instruction for example:&lt;/p&gt;

&lt;p&gt;Go to your room.&lt;/p&gt;

&lt;p&gt;This is actually a collection of many subroutines that are built into our brains.&lt;/p&gt;

&lt;p&gt;We must have previously learned:&lt;/p&gt;

&lt;p&gt;How to move foot muscles
How to move leg muscles
How to detect a difference in center of gravity
How to coordinate a walking sequence between multiple muscle systems, when to pull / relax, and at what timing...
How to re-adjust your balance
How to identify objects in your way.
How to walk around objects
How to identify your room
How to identify a basket
How to identify a spider!!
And so on, and so forth.&lt;/p&gt;

&lt;p&gt;Programming is like this. Except we have many programmers from around the world building many-many subroutines.&lt;/p&gt;

&lt;p&gt;We share these subroutines so that we can load them into our dumb-dumb children (computers) and make them smart.&lt;/p&gt;

&lt;p&gt;In a sense, we can pick what type of pre-trained child we want. A starting foundation that we can build on.&lt;/p&gt;

&lt;p&gt;Some prefer raw clay, some prefer a strong foundation.&lt;/p&gt;

&lt;p&gt;Culturally, many programming parents love open source projects. There&amp;#39;s a feeling of unity and sharing. They are contributing to a global effort in raising the average intelligence of software everywhere.&lt;/p&gt;

&lt;p&gt;Happy Programming. &amp;lt;3&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Algorithm to return to the Beginning of Loop in (corrupt) LinkedList</title>
   <link href="http://www.prakashn.com/2015/03/19/Algorithm-to%20return-beginning-of-loop/"/>
   <updated>2015-03-19T00:00:00-04:00</updated>
   <id>http://www.prakashn.com/2015/03/19/Algorithm-to return-beginning-of-loop</id>
   <content type="html">&lt;h4 id=&quot;question:&quot;&gt;QUESTION:&lt;/h4&gt;

&lt;p&gt;Given a circular linked list, implement an algorithm which returns node at the beginning of the loop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DEFINITION&lt;/strong&gt;
    Circular linked list: A (corrupt) linked list in which a node’s next pointer points to an earlier node, so as to make a loop in the linked list.         &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXAMPLE&lt;/strong&gt;&lt;br&gt;
input: A -&amp;gt; B -&amp;gt; C -&amp;gt; D -&amp;gt; E -&amp;gt; C [the same C as earlier]&lt;br&gt;
output: C&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CODE&lt;/strong&gt; from &lt;a href=&quot;https://github.com/gaylemcd/ctci/blob/master/java/Chapter%202/Question2_6/Question.java&quot;&gt;ctci&lt;/a&gt;  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedListNode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindBeginning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinkedListNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LinkedListNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LinkedListNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        
        &lt;span class=&quot;c1&quot;&gt;// Find meeting point&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Error check - there is no meeting point, and &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// therefore no loop&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Move slow to Head. Keep fast at Meeting &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       Point. Each are k steps from the Loop Start. &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       If they move at the same pace, they must&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;       meet at Loop Start. */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Both now point to the start of the loop.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;analysis:&quot;&gt;ANALYSIS:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Why is this working??&lt;/strong&gt;
let k be the num of steps from head to loopBeginNode.&lt;br&gt;
let s be the num of steps from loopBeginNode to Meeting node&lt;br&gt;
&lt;em&gt;slow&lt;/em&gt; has previously travelled k + s nodes&lt;br&gt;
&lt;em&gt;fast&lt;/em&gt; been circulating the n circles in the ring (1 &amp;lt;= n).&lt;br&gt;
let r be the loop length&lt;br&gt;
then fast has travelled s + nr to meet the slow.&lt;br&gt;
Hence meeting point = &lt;strong&gt;(s + nr) = s&lt;/strong&gt; { due to the loop }&lt;br&gt;
The total movement of fast from head is &lt;strong&gt;k + s + nr&lt;/strong&gt;.&lt;br&gt;
so from meeting node fast needs to move k times to reach loopBeginNode.&lt;br&gt;
from head, k steps is needed to reach the loopBeginNode.          &lt;/p&gt;

&lt;p&gt;Hope you enjoyed it. &lt;/p&gt;

&lt;p&gt;Happy Coding . :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Credits&lt;/strong&gt;: To my geeky friend &lt;a href=&quot;http://www.santhosh.info/&quot;&gt;Santhosh&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Competitive programming tips from Anudeep</title>
   <link href="http://www.prakashn.com/2015/03/12/competitive-programming-tips-from-Anudeep/"/>
   <updated>2015-03-12T00:00:00-04:00</updated>
   <id>http://www.prakashn.com/2015/03/12/competitive-programming-tips-from-Anudeep</id>
   <content type="html">&lt;p&gt;Below are the talk given by Anudeep - &lt;a href=&quot;https://abhijournal.wordpress.com/2013/12/22/competitive-programming-what-was-anudeep-nekkantis-competitive-programming-strategy-to-become-35th-in-global-ranking-in-just-6-7-months/&quot;&gt;source for reference:&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&quot;what-i-did-?&quot;&gt;What I did ?&lt;/h3&gt;

&lt;p&gt;Solved about 300 problems on SPOJ in this order – Sphere Online Judge (SPOJ)&lt;/p&gt;

&lt;h3 id=&quot;result-?&quot;&gt;Result ?&lt;/h3&gt;

&lt;p&gt;Became very good with C++ and STL
Got introduced to most Competitive programming KEYWORDS (like DP, maxflow, sets, hashing, etc)
Learned Standard Problems and Algorithms
Intending code
Fast typing :P&lt;/p&gt;

&lt;h4 id=&quot;how-?&quot;&gt;How ?&lt;/h4&gt;

&lt;p&gt;Before starting programming, I searched about how and where to start, many said “Learn an Algorithm, implement it, solve  problems related to it”. I did notdo it that way, If you know what algorithm to use you generally think in that direction and leave about correctness.  I did them problem by problem, easy to hard, I spent 1 – 4 hours on a problem.
I get the idea, I code it, Get it Accepted. (I used to test a lot, I always wanted to get AC on first go)&lt;/p&gt;

&lt;p&gt;I do not get the idea, I save that problem and try it after a month again. If I still do not get them, then search for hints. If it clearly needed some algorithm which I never used then I first smile (? I could not only because I did not knew the algorithm :P ) and then start reading about that algorithm. TopCoder had tutorials of almost all common algorithms. This is where I did a BIG MISTAKE. I never cared about correctness or run-time analysis proof, I always learned how to solve the problem using that algorithm, I hardly learned about how the algorithm works. I feel bad about it now, but that is how I solved those problems then. I solved max-flow, convex hull, etc., problems using described algorithms but I did not UNDERSTAND those algorithms then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mistake:&lt;/strong&gt; Once I started taking part in contests, I completely stopped practice.&lt;/p&gt;

&lt;p&gt;35th in Global Ranking&lt;/p&gt;

&lt;p&gt;CodeChef long contests are comparatively easy ( Which is good, You can learn a lot), you get a lot of time to think about a problem, search for resources. You only need KEYWORDS to search for similar problems.
I gave a lot of time for each contest. I used to solve 4 easy problems in 2-3 days, then take 5-6 days for other 3 problems.
CodeChef rating system is not good. It is highly Volatile.
If I am to start programming now, I would do it this way&lt;/p&gt;

&lt;p&gt;Solve 200 most solved problems on SPOJ, Problem by problem. In 2 months.
(This will teach all standard problems, algorithms and implementation skills)
Solve problems from CodeChef and CodeForces for 2 months.
(This will teach variations, we can read others solutions and learn better ways. Skip easy problems)
Solve problems from TopCoder for 2 months.
(This will teach  Dynamic Programming. Div 1 500p)
Check past ACM ICPC Regional’s Problems
(Great quality problems)
If I am to learn a new Algorithm now, I would do it this way&lt;/p&gt;

&lt;p&gt;Read it from at least 3-4 different sources.
Understand correctness proof and run-time analysis.
(This is very very important, you will know it only when you  deal with non standard  and hard problems)
Question yourself on every step for correctness. Try to tweak the implementation.
Check other implementations.
Final Note
Thought I became good in solving problems and had good rank. I later(Feb 13) realized that I learned it the wrong way. I then started learning again. I learned all the algorithms again this time gave importance to the algorithm itself, correctness proof and mathematical analysis. It is worth the time.&lt;/p&gt;

&lt;p&gt;Lucy and the Flowers – Problem from December long contest, Try to solve it with suffix arrays. You can only if you understand suffix arrays and LCP completely.&lt;/p&gt;

&lt;p&gt;I was able to solve a not-so-obvious medium level Max-Flow problem at ACM KGP Onsite only because I completely understood how the algorithm works. It was at 4 hour 25 minutes I got 5th problem accepted, then I read this problem and got it accepted 4 minutes before end. Learning the algorithm helped.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Stock Market Volatility with Mapreduce</title>
   <link href="http://www.prakashn.com/2015/02/28/Stock-Market-Volatility/"/>
   <updated>2015-02-28T00:00:00-05:00</updated>
   <id>http://www.prakashn.com/2015/02/28/Stock-Market-Volatility</id>
   <content type="html">&lt;p&gt;Using mapreduce to compute the stock market volatility of 3000 stocks with their past three year data.
* &lt;a href=&quot;https://github.com/prakashn27/Volatility-Analysis&quot;&gt;Code repo Link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Technology&lt;/strong&gt;  : Java&lt;br&gt;
&lt;strong&gt;Paradigm&lt;/strong&gt;    : MapReduce with Hadoop&lt;/p&gt;

&lt;h3 id=&quot;objective:&quot;&gt;Objective:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Find the top 10 stocks with Lowest (min) volatility.&lt;/li&gt;
&lt;li&gt; Find the top 10 stocks with the Highest (max) volatility.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h3&gt;

&lt;p&gt;I used mapreduce paradigm of Hadoop to serialise the calculation of volatility for each month and computed the top 10 and bottom values.&lt;br&gt;
Number of Mapper Implementation : 3 Number of Reducer Implementation : 3        &lt;/p&gt;

&lt;h4 id=&quot;roles-of-each-mapper-and-reducer:&quot;&gt;Roles of each Mapper and Reducer:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Mapper1&lt;/strong&gt;&lt;br&gt;
• splits the input data and options the date and close adjacent value.
• key - stock_name + month + year
• value - date + adjacent close value&lt;br&gt;
&lt;strong&gt;Reducer1&lt;/strong&gt;&lt;br&gt;
• Since after the map step the values which have same key are grouped
together and passed to the reducer as iterable, values that correspond to specific month and year of the particular stock are grouped together.
• Beginning adjacent close value and end adjacent close value are obtained by integrating through the iterable and the value of xi for the corresponding month is computed.
• key - Company Name
• Value - Computed Xi.&lt;br&gt;
&lt;strong&gt;Mapper2&lt;/strong&gt;&lt;br&gt;
• Now we have to consolidate all the values obtained from the reducer with respect to company name.
• Key - Company Name
• Value - Xi&lt;br&gt;
&lt;strong&gt;Reducer2&lt;/strong&gt;&lt;br&gt;
• All the xi corresponding to the the respective companies are grouped
together.
• Volatility for the particular company is obtained from these values.
• Key - Company Name
• Value - Volatility&lt;br&gt;
&lt;strong&gt;Mapper3:&lt;/strong&gt;&lt;br&gt;
• All the companies are grouped together with a common key.
• Key - Common
• Value = Company Name + Volatility
&lt;strong&gt;Reducer3:&lt;/strong&gt;&lt;br&gt;
• Obtained iterable contains all the company name with values and they are
sorted by a custom comparator.
• top 10 and bottom 10 values are obtained from the List&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fun with SWIFT and iOS</title>
   <link href="http://www.prakashn.com/2014/12/27/fun-with-swift-and-iOS/"/>
   <updated>2014-12-27T00:00:00-05:00</updated>
   <id>http://www.prakashn.com/2014/12/27/fun-with-swift-and-iOS</id>
   <content type="html">&lt;p&gt;Contributed to &lt;a href=&quot;%22https://github.com/prakashn27/ctci%22&quot;&gt;open source repository&lt;/a&gt; using swift programming language. I was also working some &lt;a href=&quot;%22https://github.com/prakashn27/my-Swift_Projects%22&quot;&gt;pet projects&lt;/a&gt; to try out swift and ios. My pet iOS projects developed in swift. &lt;/p&gt;

&lt;h4 id=&quot;projects-list:&quot;&gt;Projects List:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prakashn27/my-Swift_Projects/tree/master/CatYears&quot;&gt;Cat years&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prakashn27/my-Swift_Projects/tree/master/HowManyFingers&quot;&gt;How many fingers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prakashn27/my-Swift_Projects/tree/master/Is%20It%20Prime&quot;&gt;Is it a prime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prakashn27/my-Swift_Projects/tree/master/Stopwatch&quot;&gt;Stop watch&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>My tweaks of PintOS Operating System!</title>
   <link href="http://www.prakashn.com/2014/09/06/my-tweaks-of-an-OS/"/>
   <updated>2014-09-06T00:00:00-04:00</updated>
   <id>http://www.prakashn.com/2014/09/06/my-tweaks-of-an-OS</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://web.stanford.edu/class/cs140/projects/pintos/pintos.html#SEC_Contents&quot;&gt;Pintos&lt;/a&gt; is a simple operating system framework for the 80x86 architecture. It does not support priority scheduling. Our task is to implement priority scheduler and multilevel feed back priority scheduler.&lt;br&gt;
* &lt;a href=&quot;https://github.com/prakashn27/Pintos-Project1&quot;&gt;Code repo Link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h2&gt;

&lt;h3 id=&quot;priority-scheduler&quot;&gt;Priority Scheduler&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;For priority scheduler, Changed the scheduler linked list into priority queue, so that everytime next Highest prioirty thread is scheduled.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; 
1. Guarantees early completion of high priority jobs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;br&gt;
- Can cause starvation of low priority jobs 
- How to decide/assign priority numbers?&lt;/p&gt;

&lt;h3 id=&quot;multi-level-feedback-priority-queue-scheduler&quot;&gt;Multi level feedback priority queue scheduler&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;For Multilevel feedback queue scheduler, I maintained seperate queue (8ms round robin queue, 16ms round robin queue and FIFO). All the process first goes into the first queue, if it is not completed then it is scheduled to next queue and even if 24ms (8 + 16) is not enough for the process to finish it is appended in the tail of the FIFO. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;br&gt;
1. Great for timesharing – no starvation
2. Does not require prior knowledge of CPU burst times
3. Generally reduces average response time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;br&gt;
1. What if all jobs are almost time same length? Increases the turnaround time.&lt;br&gt;
2. How to set the “best” time quantum?
        * if small, then context switch often, incurring high overhead&lt;br&gt;
        * if large, then response time degrades             &lt;/p&gt;
</content>
 </entry>
 

</feed>
